/* (C) Albert Mietus. Demo and test */

from My_ExpressionParser import ExpressionParser; 

from std.data.grammars import Grammer, Rule, ID;
from std.algorithms.parser import PEG;

implement ParserDemo.Base_ExpressionParser {
exp on self.text {
    """Just call parse the input --using the parser-- and output it."""
    self.tree := self.parser.parse(exp);
}
} //End Base_ExpressionParser
/*****************************************************************************************************/


implement ParserDemo.ExpressionParser {

- Grammar: my_expression(){
  // ToDo: logic expression, ect

   Rule: expr;
   Rule: atom_value, unary, exponentiation,  multy_divide, add_minus;
   Rule: literal_value, literal_number, literal_str;
   Rule: named_value, variable, funcall parms;

   atom_value      <- literal_value
              	   |  '(' expr ')'
	      	   |  named_value
	      	   ;
   literal_value   <- literal_number
   		   | literal_str
		 //| Booleans etc.
		   ;
   literal_number  <- [:digit:]+
   		 //| ToDo: Float, Complex ect.
		   ;
   literal_str 	   <- '"'   ( [^\'\n]* ) '"' // Note: \'==='; but highlighting is better
   		   |  "'"   ( [^\"\n]* ) "'"
		   |  '"""' ( [.\n]*? ) '"""'
		   |  "'''" ( [.\n]*? ) "'''"
		   ;
   name_value      <- variable
   		   |  funcall
		   ;
   funcall	   <- ID '(' parms ')';
   variable	   <- ID;
   parms	   <- expr (',' expr )* // Is this correct wrt recursion?

   unary	   <- ('+' | '-')? atom_value;
   exponentiation  <- unary          ('**' expr)?;
   multy_divide	   <- exponentiation (('*' | '/' | '%') expr)?;
   add_minus	   <- multy_divide  (('+'|'-') expr)?;
   expr		   < add_minus;

   return expr;
}

- init() {
  Grammar g = self.my_expression()
  self.parser = PEG(g);
}

} //End ExpressionParser
/*****************************************************************************************************/


/*GAM: THIS IS NOT POSSIBLE: Grammar's can not be "loaded" (dynamicly)
       Each "rule" is basically a very short version of a function  -- and as such static */
//WRONG		implement ParserDemo.Init_ExpressionParser {
//WRONG		- init(Grammer:g) {
//WRONG		  self.parser = PEG(g);
//WRONG		}
//WRONG		} //End Init_ExpressionParser
/*****************************************************************************************************/

/*GAM: THIS IS NOT POSSIBLE: Grammar's can not be "loaded" (dynamicly)
       Each "rule" is basically a very short version of a function  -- and as such static */
//WRONG		implement ParserDemo.Port_ExpressionParser {
//WRONG		g on expression
//WRONG		{
//WRONG		  self.parser = PEG(g);
//WRONG		}
//WRONG		} //End Port_ExpressionParser