{# (C) Albert Mietus, 2023. Part of Castle/CCastle project #}

{# parameters: ``protocols``: PTH.Sequence[aigr.EventProtocol]
#}
{% import 'macros/CastleMacros.jinja2' as m %}
{#------------------------------------------#}

{%- macro Str_or_Type(t) -%}
  {%- if t is string -%}
    "{{t}}"
  {%- else -%}
    {{t.__name__}}
  {%- endif -%}
{%- endmacro -%}


{%- macro DotOrNot(opt_namespace, id) -%}
  {%- if opt_namespace|length -%}
    {{ opt_namespace }}.{{ id }}
  {%- else -%}
    {{ id }}
  {%- endif -%}
{%- endmacro -%}



{%- for proto in protocols %}
##
## The protocol Data Definitions for {{proto.name}} -- with {{proto.events|length}} events
##

{{m.ProtocolName(proto) }} = buildin.CC_B_Protocol(name="{{ proto.name }}",
  {% if proto.typedParameters  %}
                                parameters=(
    {% for parm in proto.typedParameters %}
                                    ('{{ parm.name}}', {{ Str_or_Type(parm.type) }}),
    {% endfor %}
                                ), {#- XXX ToDo: parms: tuple, namedType, strings, ... (see event -- use macro?) #}

  {% endif %}
                                kind=buildin.{{proto.kind}},
                                inherit_from=
                                {{- DotOrNot( proto.based_on.ns.name , m.ProtocolName(proto.based_on) ) -}}, #XXX# NSa & NSb
{#
  * NSa:        Need cleanup
  * NSb: (Prio) Inserts "own" NS, which is wrong
#}
                                events=[])

  {% for e in proto.events %}
    {{- m.ProtocolName(proto)}}.events.append(buildin.CC_B_P_EventID(name="{{- e.name -}}",
                                seqNo={{- m.EventIndexName(proto, e) }},
                                part_of={{ m.ProtocolName(proto) }}))
  {% endfor %} {#- event #}

{% endfor %} {#- protocols #}
