@startuml

package _base {

abstract AST_BASE {
  -_parse_tree
  +position()
  +position_end()
  ~serialize()
}

class ID {
  +name
  #validate_or_raise()
}

ID  =|> AST_BASE
}

package MixIns  #Gray {

  class MixIn_value_attribute<MixIn> {
  _value
  value()
  }

  class MixIn_expr_attribute<MixIn> {
  _expr
  expr()
  }

  class MixIn_children_tuple<MixIn> {
   _children :Tuple
  __len__()
  __getitem__()
  __iter__()
  }
}

package Peg #0077ff {

abstract PEG
PEG =up=|>   AST_BASE



abstract Terminal
Terminal   =up=|> PEG
Terminal  --up--|> MixIn_value_attribute
StrTerm    =up=|> Terminal
RexExpTerm =up=|> Terminal
Number     =up=|> Terminal

abstract Markers #ORANGE
Markers    =up=|> PEG
annotation EOF #ORANGE
EOF 	   =up=|> Markers

abstract NonTerminal
NonTerminal =up=|> PEG
abstract Expression
Expression  =up=|> NonTerminal

class Setting  {
 name  : ID
 value
}
Setting =up=|> PEG
Setting -up-> ID

class Rule {
  name  :ID
  expr  :[] Expression
}
Rule =up=|> NonTerminal
Rule -up-> ID
Rule ---> Expression

interface Rules
Rules     =up=|> PEG
Rules    --up--|> MixIn_children_tuple

ParseRules =up=|> Rules
Settings   =up=|> Rules


class Grammar {
  +all_rules    :Rules
  -parse_rules  :ParseRules
  -settings     :Settings
}
Grammar =up=|> NonTerminal


abstract Group
Group            =up=|> Expression
UnorderedGroup   =up=|> Group
UnorderedGroup  --up--|> MixIn_expr_attribute
abstract Quantity
Quantity         =up=|> Group
Quantity        --up--|> MixIn_expr_attribute
Sequence         =up=|> Expression
Sequence        --up--|> MixIn_children_tuple

OrderedChoice    =up=|> Expression
OrderedChoice   --up--|> MixIn_children_tuple

class Optional   << (?, #0077ff) >>
Optional	 =up=|> Quantity
class ZeroOrMore << (*, #0077ff) >>
ZeroOrMore	 =up=|> Quantity
class OneOrMore  << (+, #0077ff) >>
OneOrMore	 =up=|> Quantity

abstract Predicate
Predicate	 =up=|> Expression
Predicate       --up--|> MixIn_expr_attribute
class AndPredicate << (&, #0077ff) notconsuming >>
AndPredicate     =up=|> Predicate
class NotPredicate << (! ,#0077ff) not consuming >>
NotPredicate     =up=|> Predicate

}
@enduml














